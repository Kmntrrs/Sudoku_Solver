""" Example puzzle with empty spaces represented by 0's """

puzzle = [
         [0, 2, 0, 1, 0, 0, 0, 5, 0],
         [9, 0, 1, 0, 8, 0, 0, 0, 0],
         [0, 0, 5, 0, 0, 0, 0, 2, 0],
         [4, 0, 6, 0, 7, 0, 0, 0, 0],
         [0, 0, 0, 6, 0, 9, 0, 0, 0],
         [0, 0, 0, 0, 1, 0, 2, 0, 3],  
         [0, 1, 0, 0, 0, 0, 9, 0, 0],
         [0, 0, 0, 0, 9, 0, 6, 0, 7],
         [0, 4, 0, 0, 0, 1, 0, 3, 0]
]

""" Create a function to solve the puzzle, using functions: find_empty and num_check  """
def solve(puzzle):
  row, column = find_empty(puzzle)
  if row and column == None:
    return "Puzzle solved!"
  return None

  for num in range(1,10):
    if num_check(puzzle, num):
      puzzle[row][column] = num
      if solve(puzzle):
        return True
  return False


""" Create a function that finds empty spaces """
def find_empty(puzzle):
  for p in range(len(puzzle)):
    for u in range(len(puzzle)):
      if puzzle[p][u] == 0:
        return (p,u)
  return "No empty spaces!"
  
  
  """ Create function that checks whether a given number already exists in the row, column or, 3x3 box """
def num_check(puzzle, num):
  #Check if num is in row
  for row in puzzle:
    if num in puzzle[row]:
      return False

  #Check if num is in columns 
  for row in range(9):
    for column in range(len(puzzle)):
      if num in puzzle[row][column]:
        return False

  #Check if num is in 3x3 square
  for row in range(0, len(puzzle), 3):
    for column in range(0, len(puzzle), 3):
      if num in puzzle[row][column]:
        return False
  return True
